{"name":"Sniper","tagline":"Golang实现的高性能HTTP负载工具","body":"Sniper       [![Build Status](https://drone.io/github.com/lubia/sniper/status.png)](https://drone.io/github.com/lubia/sniper/latest)\r\n======\r\n>Sniper是一个功能强大、高性能的HTTP负载工具,采用Golang编写。利用协程并发优势，实现海量并发、超低内存占用、丰富图表展示。是测试、分析、优化服务端性能的绝佳助手！\r\n\r\n##体验\r\n提供以下可执行文件，可直接运行\r\n* [Darwin 64 bit](http://lubia-me.qiniudn.com/sniper_darwin_amd64)      \r\n* [Darwin 32 bit](http://lubia-me.qiniudn.com/sniper_darwin_386)\r\n* [Linux 64 bit](http://lubia-me.qiniudn.com/sniper_linux_amd64)\r\n* [Linux 32 bit](http://lubia-me.qiniudn.com/sniper_linux_386)\r\n* [FreeBSD 64 bit](http://lubia-me.qiniudn.com/sniper_freebsd_amd64)\r\n* [FreeBSD 32 bit](http://lubia-me.qiniudn.com/sniper_freebsd_386)\r\n\r\n##功能\r\n以实用为原则，实现以下功能\r\n- GET / POST\r\n- keep-alive模式\r\n- https\r\n- 图表展示结果\r\n- 测试多个目标\r\n- 支持大文件负载\r\n- 跨平台，支持Linux,FreeBSD,Darwin\r\n\r\n####对比同类工具\r\n<table class=\"table table-bordered table-striped table-condensed\">\r\n   <tr>\r\n      <td>工具 </td>\r\n      <td>编写语言 </td>\r\n      <td>keep-alive </td>\r\n      <td>https </td>\r\n      <td>多点测试 </td>\r\n      <td>结果展示 </td>\r\n      <td>代理</td>\r\n   </tr>\r\n   <tr>\r\n      <td>ab </td>\r\n      <td>c </td>\r\n      <td>NO </td>\r\n      <td>YES </td>\r\n      <td>NO </td>\r\n      <td>html，标准输出</td>\r\n      <td>YES </td>\r\n   </tr>\r\n   <tr>\r\n      <td>siege </td>\r\n      <td>c </td>\r\n      <td>YES </td>\r\n      <td>YES </td>\r\n      <td>YES </td>\r\n      <td>csv，标准输出</td>\r\n      <td>YES </td>\r\n   </tr>\r\n   <tr>\r\n      <td>http_load </td>\r\n      <td>c </td>\r\n      <td>NO </td>\r\n      <td>YES </td>\r\n      <td>YES </td>\r\n      <td>标准输出</td>\r\n      <td>YES </td>\r\n   </tr>\r\n   <tr>\r\n      <td>webbench </td>\r\n      <td>c </td>\r\n      <td>NO </td>\r\n      <td>YES </td>\r\n      <td>NO </td>\r\n      <td>标准输出</td>\r\n      <td>YES </td>\r\n   </tr>\r\n   <tr>\r\n      <td>sniper</td>\r\n      <td>go</td>\r\n      <td>YES </td>\r\n      <td>YES </td>\r\n      <td>YES </td>\r\n      <td>js+html5，标准输出</td>\r\n      <td>NO </td>\r\n   </tr>\r\n</table>\r\n\r\n\r\n##性能\r\n- 内存占用低于Apache Benchmark（ab）等主流负载工具\r\n- 执行速度接近ab，高并发时超过ab\r\n- 支持10k以上并发\r\n- 支持超大文件测试\r\n\r\n![Alt text](http://lubia-me.qiniudn.com/cmp.png)\r\n\r\n测试的详细情况，与各大负载测试工具的性能对比[在此](http://www.lubia.me/http-loader-compare)\r\n\r\n##图表展示\r\n- 统计分析每个请求\r\n- 输出建立连接时间\r\n- 输出服务端响应时间\r\n- 输出总时间\r\n\r\n基于[dygraphs](http://dygraphs.com/)与html5，详细展现服务端性能情况\r\n\r\n从测试结果中等距采样约1000样本，详细展现连接建立，链路传输和服务端执行情况\r\n\r\n下图展示了总时间和连接建立时间的对比，Golang是怎样得到连接建立的时间呢？\r\n\r\n原来项目基于net库实现了HTTP协议栈，重构而不是官方net/http库才拿到详细的信息，\r\n\r\n提升了性能。\r\n\r\n![Alt text](http://lubia-me.qiniudn.com/sniper_2.JPG)\r\n\r\n##使用说明\r\n###1. 安装Golang\r\n\r\n请参考astaxie的开源Golang书籍《Go Web 编程》一书，[Go安装](https://github.com/astaxie/build-web-application-with-golang/blob/master/ebook/01.1.md)一节。\r\n\r\n###2. 安装Sniper\r\n\r\n    $ go get github.com/lubia/sniper\r\n    $ go install github.com/lubia/sniper\r\n    $ cp src/github.com/lubia/sniper/.sniperc ~\r\n\r\n###3. 参数说明\r\n\r\n####示例\r\nGET\r\n\r\n    $sniper -c 10 -n 100 http://www.google.com \r\n\r\nPOST\r\n\r\n    $sniper -c 10 -n 100 -p postData.txt http://www.google.com\r\n    \r\n####参数\r\n\r\n#####命令行参数\r\n\r\n```\r\nUsage: \r\n   sniper [options] http[s]://hostname[:port][/path]                 http或https，支持域名或ip\r\n   sniper [options] -f urls.txt                                      测试多个服务端地址，文件格式：每个url一行\r\nOptions: \r\n   -c, --concurrent     concurrent users, default is 1.              并发数(默认为1)\r\n   -n, --requests       number of requests to perform.               总请求数\r\n   -r, --repetitions    number of times to run the test.             重复次数(n=c*r)\r\n   -t, --time           testing time, 30 mean 30 seconds.            测试时间(单位秒)\r\n   -R, --sniperc        specify an sniperc file to get config        配置文件地址(默认为$HOME/.sniperc)\r\n                        (default is $HOME/.sniperc).               \r\n   -f, --urlfile        select a specific URLS file.                 多个测试目标的url文件\r\n   -p, --post           select a specific file to POST.              POST模式\r\n   -T, --content-type   set Content-Type in request                  POST的数据类型(默认为text/plain)\r\n                        (default is text/plain).\r\n   -V, --Version        print the version number.                    打印sniper版本号\r\n   -h, --help           print this section.                          输出帮助信息\r\n   -C, --config         show the current config.                     输出当前配置文件的配置\r\n   -s, --plot           plot detail transactions' info               是否输出html展示测试结果(默认为true) \r\n                        (true | false,default set true,              (注意:采用-t指定测试时间时,不会输出html)\r\n                        notice: set -t will not plot anyhow).\r\n\r\n```\r\n\r\n\r\n#####配置文件参数\r\n\r\n    说明：默认从$HOME/.sniperc读取配置文件，配置文件设置与命令行设置互为补充\r\n    可通过命令行 -R 指定配置文件地址，-C 查看默认配置。\r\n\r\n```\r\n[protocol]\r\nversion = HTTP/1.1                            HTTP协议版本，1.1或1.0\r\n#connection = keep-alive                      connection模式，# 符号作为注释\r\nconnection = close\r\naccept-encoding = gzip                        \r\nuser-agent = golang & sniper                  \r\n\r\n[header]\r\n#cookie = SSID=Abh_TYcDc6YSQh-GB              自定义消息头，等号连接键值对\r\n\r\n[process]\r\ntimeout = 30                                  socket超时时间 \r\nfailures = 64                                 最大失败次数，socket错误超过此值则程序退出\r\n\r\n[Authenticate]\r\nlogin = jeff:supersecret                      HTTP基本认证\r\n\r\n[ssl]\r\nssl-cert = /root/cert.pem                     ssl-cert文件地址\r\nssl-key = /root/key.pem                       ssl-key文件地址\r\nssl-timeout = 30                              https超时\r\n```\r\n\r\n#####结果输出\r\n\r\n图表输出到当前目录下plot.html\r\n```\r\nTransactions:                   1000 hits           总请求数\r\nAvailability:                   100.00 %            完成百分百    \r\nElapsed time:                   0.15 secs           sniper执行时间\r\nDocument length:               1162 Bytes           服务端单个返回长度\r\nTotalTransfer:                  1.11 MB             总传输数据量\r\nTransaction rate:            6625.60 trans/sec      每秒事务数 \r\nThroughput:                     7.34 MB/sec         吞吐量 \r\nSuccessful:                     1000 hits           成功次数(结果码不为200也是成功)\r\nFailed:                           0 hits            失败次数(socket等链路错误) \r\nTransactionTime:               1.495 ms(mean)       单个请求总耗时(平均)\r\nConnectionTime:                0.596 ms(mean)       链路建立耗时(平均，tcp三次握手)\r\nProcessTime:                   0.900 ms(mean)       服务端执行时间+传输时间(TransactionTime = ConnectionTime + ProcessTime)\r\nStateCode:                    1000(code 200)        结果码为200的数量\r\n```\r\n##关于\r\n####作者\r\n\r\nLubia Yang,程序员\r\n\r\n博客：[程式設計](http://www.lubia.me)\r\n\r\n联络：yanyuan2046 at 126.com\r\n\r\n####Licence\r\n[Apache License, Version 2.0.](http://www.apache.org/licenses/LICENSE-2.0.html)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}